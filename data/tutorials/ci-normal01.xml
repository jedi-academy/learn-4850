<?xml version="1.0" encoding="UTF-8"?>
<!--
Normal 01 - Working With Controllers & Routing
-->
<tutorial status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Tutorial Goals" layout="normal">
        <p>This tutorial will walk you through some common controller and
            routing challenges.</p>
        <p>The goal is to fix the broken starter webapp, as directed.</p>
        <p>That can't be so hard, can it? &lt;-- said with a straight face.</p>
        <p>Suggestion: you may want to skim the slideshow first,
            before working your way through it.</p>
    </slide>

    <slide title="Preparation" layout="normal">
        <div class="left">
            <p>I have prepared a 
                <a href="https://github.com/jedi-academy/starter-quotes">
                    starter webapp</a> â€“ a mini 
                "content management system". 
                It is incomplete and the pieces are not properly connected, 
                and you need to fix these, as described following.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="600" height="312" src="/data/tutorials/pix/ci3/3-1.png"/>
        </div>
    </slide>

    <slide title="The Starter Webapp" layout="normal">
        <p>The "Quotes" starter webapp
            uses <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a> and 
            <a href="https://jquery.com/" target="_blank">jQuery</a>, 
            simply because they make it so easy to have a 
            not-ugly-though-the-same-as-everyone-else's looking site.</p>
        <p>The  Quotes webapp looks beautiful, I have to admit, but none 
            of the links work, apart from the logo taking you back 
            to the homepage :(</p>
        <p>Your job is to fix these broken links, per the directions that follow :)</p>
    </slide>

    <slide title="What Comes With the Starter?" layout="normal">
        <p>The starter app uses a base controller, <code>application/core/MY_Controller</code>,
            which uses <code>application/views/_template</code> to provide
            the shell and layout of rendered webpages. 
            The app uses a "view templating" strategy, where a controller is
            expected to set the name of its view fragment, and any other
            data, as <code>$this-&gt;data</code> parameters,
            and to then call the inherited <code>render()</code> method.</p>
        <p>Data for the starter app is provided in the <code>application/models/Quotes</code>
            model, which has a mock database of quotations. No RDB is needed to run this app.</p>
    </slide>

    <slide title="Where Do I Start?" layout="normal">
        <p>There is a view fragment template in <code>application/views/justone.php</code>. 
            This is meant to display just a single quote. </p>
            <p>Each of the broken links needs to resolve to the appropriate 
            controller, or method in a controller, which extracts the 
            relevant quote data from the model, 
            and builds the view parameters for <code>justone</code> to present it.</p>
        <p>Solve the logic for the first broken link that you fix, 
            and you can re-use the technique for all the others.</p>
        <p>The logic? Inside the appropriate method of the appropriate controller,
            the handling of a request should be to retrieve the appropriate
            record from the <code>quotes</code> model, add its fields to the appropriate
            elements of the <code>$this-&gt;data</code> parameter array, and then call
            your inherited <code>render</code> method.</p>
    </slide>

    <slide title="What Needs Fixing?" layout="normal">
        <p>You might use the table below as a checklist.
            The next few slides provide helpful details.
        </p>
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <th>Location</th>
                <th>Routing Strategy</th>
            </tr>
            <tr>
                <td>first</td>
                <td>Navbar</td>
                <td>Normal routing</td>
            </tr>
            <tr>
                <td>last</td>
                <td>Navbar</td>
                <td>Normal routing</td>
            </tr>
            <tr>
                <td>sleep</td>
                <td>Homepage</td>
                <td>Wildcard routing</td>
            </tr>
            <tr>
                <td>lock/em/up</td>
                <td>Homepage</td>
                <td>Wildcard routing</td>
            </tr>
            <tr>
                <td>show/3</td>
                <td>Homepage</td>
                <td>Wildcard routing</td>
            </tr>
            <tr>
                <td>dunno</td>
                <td>Homepage</td>
                <td>Callback routing</td>
            </tr>
            <tr>
                <td>wise/bingo</td>
                <td>Homepage</td>
                <td>Regular expression routing</td>
            </tr>
            <tr>
                <td>comp4711/wisdom</td>
                <td>Homepage</td>
                <td>Regular expression routing</td>
            </tr>
        </table>
    </slide>

    <slide title="Suggested Process" layout="normal">
        <p>Fix the problems in sequence, working your way down the list.</p>
        <p>For each of these, I suggest you determine the controller 
            responsible for handling the request, the method inside 
            that controller, and then the necessary routing.</p>   
        <p>How will you know if your "fix" worked?
            Clicking on an author on the homepage will lead to the featured quote
            from him/her.</p>
    </slide>

    <slide title="Helpful Hint" layout="normal">
        <p>A helpful hint... if you retrieve a record from your model, 
            and you want to add its key/value pairs to the view 
            parameters array, you could have a bunch of assignments 
            (<code>$this-&gt;data['who']= ...</code>), 
            but there is an easier way:</p>
        <p>
            <code>$record = $this-&gt;quotes-&gt;whatever(...);<br/>
                $this-&gt;data = array_merge($this-&gt;data, $record);</code>
        </p>
        <p>The above references a "whatever" method inside your "quotes"
            object, which comes from autoloading <code>application/models/Quote.php</code>.</p>
        <p>
            <code>array_merge</code> is a function built-in to PHP, which merges
            an associative array (the second parameter) into another (the first parameter),
            and returns the merged resulting associative array.
        </p>
    </slide>

    <slide title="#1 First" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>first</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Menu navbar, first link after the logo</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Bob Monkhouse's quote (he is the first of the six)</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Normal routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>No routing rule</td>
            </tr>
            <tr>
                <th>How to Fix It</th>
                <td>A suitable <b>new controller</b> in controllers/</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/First::index()</td>
            </tr>
        </table>
    </slide>
  
    <slide title="#2 Last" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>last</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Menu navbar, last link after the logo</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Isaac Asimov's quote (he is the last of the six)</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Normal routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>No routing rule; should lead to a subfolder</td>
            </tr>
           <tr>
                <th>How to Fix It</th>
                <td>A suitable <b>new controller</b> in controllers/last</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/last/Welcome::index()</td>
            </tr>
        </table>
    </slide>
  
    <slide title="#3 Sleep" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>sleep</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Top left author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Bob Monkhouse's quote</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Wildcard routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>routing rule, leading to first/zzz</td>
            </tr>
           <tr>
                <th>How to Fix It</th>
                <td>Remapped to the "zzz" method inside the "First" controller</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/First::zzz()</td>
            </tr>
        </table>
    </slide>
  
     <slide title="#4 Lockemup" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>lock/em/up</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Top middle author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Elaine Boosler's quote</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Wildcard routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>Routing rule leasing to welcome/shucks</td>
            </tr>
           <tr>
                <th>How to Fix It</th>
                <td>Remapped, using wildcards (lock / * / *), 
                    i.e. the "shucks"
                    method inside the "Welcome" controller</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/Welcome::shucks()</td>
            </tr>
        </table>
    </slide>

    <slide title="#5 Show" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>show/3</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Top right author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Mark Russell's quote</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Wildcard routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>Routing rule, leading to first/gimme/3),
                    i.e. the "gimme" method inside the "First" controller,
                    with that method defined to take a parameter</td>
            </tr>
           <tr>
                <th>How to Fix It</th>
                <td>Remapped using wildcard (show / digit</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/First::gimme(id)</td>
            </tr>
        </table>
    </slide>

    <slide title="#6 Dunno" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>dunno</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Lower left author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Anonymous quote?</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Callback routing</td>
            </tr>
           <tr>
                <th>Required</th>
                <td>Routing rule which returns a suitable image instead
                of a web page.</td>
            </tr>
           <tr>
                <th>How to Fix It</th>
                <td>Surprise! have a callback function that
                sets a suitable mime-type header and then returns
                a random SFW image that you have added to the
                data folder</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>Strictly inside the routing configuration, something
                    like ...<pre>
                        <code>
$route['dunno'] = function() {
	$source = './data/surprise.jpg'; // an image you provide
	// set the mime type for that image
	header("Content-type: image/jpeg"); 
	header('Content-Disposition: inline');
	readfile($source); // dish it
	die(); // and we don't have to go any further
};                            
                        </code>
                    </pre>
                </td>
            </tr>
        </table>
    </slide>

     <slide title="#7 Bingo" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>wise/bingo</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Lower middle author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Socrates' quote</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Regular expression routing</td>
            </tr>
          <tr>
                <th>Required</th>
                <td>Routing rule, leading to /bingo (<b>new controller</b>)</td>
            </tr>
            <tr>
                <th>How to Fix It</th>
                <td>Remapped using regular expression 
                    (4 letters / bingo)</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/Bingo::index()</td>
            </tr>
        </table>
    </slide>

     <slide title="#8 Wisdom" layout="normal">
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <td>comp4711/wisdom</td>
            </tr>
            <tr>
                <th>Location</th>
                <td>Lower right author image</td>
            </tr>
            <tr>
                <th>Expected result</th>
                <td>Isaac Asimov's quote</td>
            </tr>
            <tr>
                <th>Routing Strategy</th>
                <td>Regular expression routing</td>
            </tr>
          <tr>
                <th>Required</th>
                <td>Routing rule, leading to wise/bingo</td>
            </tr>
            <tr>
                <th>How to Fix It</th>
                <td>Remapped using regular expression (comp + digits / *)</td>
            </tr>
            <tr>
                <th>Hint</th>
                <td>application/controllers/Wise::bingo()</td>
            </tr>
        </table>
    </slide>
    <slide title="Are We Done Yet?" layout="normal">
        <p>When you are done, nothing will <strong>look</strong> different on the homepage, but
            the links will work properly :)</p>
    </slide>

</tutorial>
