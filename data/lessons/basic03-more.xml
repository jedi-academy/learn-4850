<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 03 - Models
-->
<lesson status="final">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Model Patterns</a>
            </li>
            <li>
                <a href="#{tag2}">Kinds of Models</a>
            </li>
        </ol>
    </slide>


    <!-- Normal slides -->

    <slide title="MODEL PATTERNS" layout="normal" tag="tag1">
        <div class="left">
            <p>Models are the "model" component of the MVC design pattern.</p>
            <p>The figure to the right shows this from the perspective of
                a webapp.</p>
            <p>Fundamentally, models encapsulate data sources.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="383" height="328" src="/data/lessons/pix/4/4-1.png"/>
        </div>
    </slide>

    <slide title="Classic Model-View-Controller" layout="normal">
        <div class="left">
            <p>The figure to the right presents a 
                "<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank"></a>classic" view of
                the MVC pattern, from a programming perspective.</p>
            <p>A user interacts with a <b>view</b>, using view components
                such as links, buttons, and form fields
                to initiate a request to a controller.</p>
            <p>The "tricky" part? The view is supposed to be bound to a 
                model as an event handler; when model state changes,
                an event is fired, and the view would respond to the
                event, updating its presentation as warranted.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="339" height="390" src="/data/lessons/pix/4/4-2.png"/>
        </div>
    </slide>

    <slide title="Classic MVC and the Web" layout="normal">
        <div class="left">
            <p>The "classic" MVC has two issues from a webapp's perspective:</p>
            <ul>
                <li>Accessing a model inside a view is legal, but considered
                    a poor practice</li>
                <li>Propagating an event in a distributed system is awkward</li>
            </ul>
            <p>The next two slides present solutions to these.</p>

        </div>
        <div class="right">
            <br/>
            <img class="scale" width="339" height="390" src="/data/lessons/pix/4/4-2.png"/>
        </div>
    </slide>

    <slide title="Model-View-Adapter" layout="normal">
        <div class="left">
            <p>The <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93adapter" target="_blank"></a>model-view-adapter design pattern has the controller
                handle all interaction with a model, and pass data to a view
                through parameters.</p>
            <p>The view is unaware of the source of the data it presents.</p>
            <p>True event handling is still awkward with PHP, as our
                objects are not memory-resident.</p>
            <p>This pattern is also called <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank"></a>model-view-presenter.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="335" height="389" src="/data/lessons/pix/4/4-3.png"/>
        </div>
    </slide>

    <slide title="Model-View-ViewModel" layout="normal">
        <div class="left">
            <p>The <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank"></a>model-view-viewmodel design pattern has an explicit
                component to handle the model and related events,
                while keeping the view itself unaware of the source
                of its data.</p>
            <p>In a webapp, this could be implemented by data-aware
                "widgets", typically programmed using Javascript.</p>
            <p>This pattern is common in enterprise applications
                (eg. <a href="http://www.asp.net/" target="_blank">ASP.net</a> 
                    and <a href="http://www.javaserverfaces.org/" target="_blank">JavaServerFaces</a>), and
                supported by <a href="https://angularjs.org/" target="_blank">AngularJS</a>.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="640" height="464" src="/data/lessons/pix/4/4-4.png"/>
        </div>
    </slide>

    <slide title="KINDS OF MODELS" layout="normal" tag="tag2">
        <p>What is a model?</p>
        <p>1) Models represent data sources &lt;data access layer&gt;, each a "collection" of entities</p>
        <p>2) Models represent entities &lt;domain model&gt;, each an object in a "collection"</p>
        <p>You've seen models corresponding to RDB tables as data
            sources. Let's dive deeper!</p>
    </slide>

    <slide title="Domain Models" layout="normal">
        <p>Domain models are awkward to enforce in PHP, without
            strong typing. They are normal in Java &amp; C#.</p>
        <p>For instance, Java supports 
            <a href="https://docs.oracle.com/javase/tutorial/javabeans/" target="_blank"></a>JavaBeans (serializable,
            standard accessor and mutator methods) for generic
            domain models.</p>
        <p>Java also supports 
            <a href="http://www.oracle.com/technetwork/java/javaee/ejb/index.html" target="_blank"></a>Enterprise JavaBeans, following
            a managed, server-side component architecture.
            These can be session based, message-based, or persistent.
        The management here is at the entity level.</p>
    </slide>

    <slide title="Active Record Models" layout="normal">
        <div class="left">
            <p>The <a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html" target="_blank"></a>active record 
            design pattern, common in webapps, suggests that
                domain models have collection-centric
                methods in addition to entity property
                accessor/mutators. This leads to model methods like...</p>
                <ul>
                    <li>
                        <code>add($record)</code> – add a new record to the collection</li>
                    <li>
                        <code>get($key)</code> – retrieve a keyed record</li>
                    <li>
                        <code>update($record)</code> – replace a record</li>
                    <li>
                        <code>delete($key)</code> – delete a record</li>
                </ul>
        </div>
        <div class="right">
            <p>Some additional methods common to active record models:
                <ul>
                    <li>
                        <code>create()</code> – return a suitable empty object</li>
                    <li>
                        <code>all()</code> – return all records</li>
                    <li>
                        <code>some(...)</code> – return some of the records</li>
                    <li>
                        <code>size()</code> – return the number of records</li>
                </ul>
            </p>
        </div>
    </slide>

    <slide title="Active Record in Practice" layout="normal">
        <div class="left">
            <p>Given how easy it is to inject or eliminate
                properties in PHP objects, many developers
                use entity properties directly, rather than attempting
                to follow the rigor of other language domain models</p>
            <p>Given the way that PHP has evolved, many
                developers will also provide methods that
                return or work with associative arrays,
                using them to store entity properties.</p>            
        </div>
        <div class="right">
            <p>This means doing something like<br/>
                <code>$customer-&gt;name</code>
                rather than something like<br/>
                <code>$customer-&gt;getName()</code>
            </p>
        </div>
    </slide>

    <slide title="Active Record in Practice /2" layout="normal">
        <div class="left">
            <p>If adding collection centric methods to a
                "conventional" domain model, it is a good idea
                for your model to have collection-specific
                properties too, for instance the name of a
                database table and the fieldname used as
                a primary key.</p>
            <p>Regardless of any accessors or CRUD methods
                you might have, make sure your model provides
                suitable methods for extracting whatever
                data your controllers need to pass on to a view!</p>
        </div>
        <div class="right">
            <p>This means having properties for the table name
                that a model is bound to, or for the XML document
                used to record state.</p>
            <p>Data extraction methods,not related to a domain
                model, could be something like <code>findNewestBlogEntry()</code>
                or <code>processOrder($items)</code>
            </p>
            <p>Note that these suggestions run counter to many "purist"
                perspectives ... PHP tends to be more relaxed!</p>
        </div>
    </slide>

    <slide title="Models Can Be Used For... ?" layout="normal">
        <p>Models can be used to encapsulate many
            different sources of data, as you will see in the
            next few slides :)</p>
        <p>Beyond relational database tables, we will take
            a quick look at encapsulating XML documents, file
            system folders, and even services.</p>            
        <p>These different kinds of models will be revisited later in the
            course, when we talk about XML and services.</p>
    </slide>
            
    <slide title="Models for RDB Tables" layout="normal">
        <div class="left">
            <p>You would normally have one model per table in the
                relational database you are using.</p>
            <p>CRUD methods in your model would deal with rows
                in the RDB table.</p>            
            <p>Reasonable model management properties in this kind
                of model would usually include the table name and the
                field name to use as the primary key.</p>
        </div>
        <div class="right">
            <p>Clearly 3 models...</p>
            <img class="scale" width="537" height="269" src="/data/lessons/pix/4/4-9.png"/>
        </div>
    </slide>

    <slide title="Sample Model for an RDB Table" layout="normal">
        <div class="left">
            <p>Referring to the contacts example from week 2, 
                <code>application/core/MY_Model.php</code> is a sample base 
                model you might use. 
                <code>models/Contacts.php</code> is a model using
                the RDB base model. The following provides access
                to all the CRUD methods defined in MY_Model, making
                it easy to follow the active record pattern.
            </p>
        </div>
        <div class="right">
            <p>
                <code>class Contacts extends MY_Model {<br/>
&#160;&#160;function __construct() {<br/>
&#160;&#160;&#160;&#160;parent::__construct();<br/>
&#160;&#160;&#160;&#160;$this->setTable('contacts', 'ID');<br/>
&#160;&#160;}<br/>
                    }</code>
            </p>
        </div>
    </slide>

    <slide title="Models for XML" layout="normal">
        <div class="left">
            <p>You could use a model for a suitably structured XML
                document, for instance one where each child of the root
                element stored the state of an entity.
                You would need to choose a convention for the "primary key"
                in such a case, for instance the "id" attribute of an entity's
                element.</p>
            <p>CRUD methods in your model would deal with children of the
                root element, and would traverse each child's
                attributes and elements to build a record object
                (or associative) array that looked like it
                came from an RDB table.</p>            
        </div>
        <div class="right">
            <p>Clearly 3 models, or maybe 4, or just 2? ...</p>
            <img class="scale" width="618" height="349" src="/data/lessons/pix/4/4-10.jpg"/>
        </div>
    </slide>

    <slide title="Models for XML /2" layout="normal">
        <p>Management properties needed to build/rebuild the XML 
            document for saving might include the document name,
            The element name of the root element, and the name
            of the attribute or nested child element to use as a
            "primary key".
        </p>
        <p>Note that this approach could lend itself to using a DTD or 
            schema for validation of "record" structure and
            content.</p>
    </slide>

    <slide title="Models for Folders" layout="normal">
        <div class="left">
            <p>You could use a model to encapsulate the contents of
                folders in your filesystem. The folder and subfolders
                would not have to be inside your webapp - they could
                be anywhere!</p>
            <p>Such a model could be used for the files themselves,
                or to mimic RDB table rows through flat file representations
                of records.</p>            
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="436" height="447" src="/data/lessons/pix/4/4-11.gif"/>

        </div>
    </slide>

    <slide title="Models for Folders /2" layout="normal">
        <p>Management properties suited to this use might include
            the base folder name for your "collection",
            and perhaps the default extension/filetype.
            A filename itself might be considered a "primary key".
        </p>
        <p>An example of this kind of model would be to provide 
            access to a folder of
            images that support an image gallery. The <code>all()</code>
            method might return a list of image descriptor objects.
            You might use subfolder names as categories.</p>
    </slide>

    <slide title="Models for Services" layout="normal">
        <div class="left">
            <p>You could use a model to encapsulate a service, mapping
                the conventional CRUD methods to something more appropriate
                for a service. This isn't the only way to access
                a service, or even the best way - just one approach.</p>
            <p>Your model would need some properties to handle
                the service configuration, for instance the endpoint
                of a remote service.</p>            
            <p>A sample method mapping is shown to the right.
                This is a foreshadowing of RESTful services :)</p>
        </div>
        <div class="right">
            <ul>
                <li>
                    <code>add($record)</code> sends a POST(x) to the service
                </li>
                <li>
                    <code>create()</code> sends a POST() to the service</li>
                <li>
                    <code>get($key)</code> sends a GET(x) to the service</li>
                <li>
                    <code>all()</code> sends a GET() to the service</li>
                <li>
                    <code>update($record)</code> sends a PUT(x) to the service</li>
                <li>
                    <code>delete($key)</code> sends a DELETE(x) to the service</li>
            </ul>
        </div>
    </slide>



</lesson>
