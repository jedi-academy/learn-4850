<?xml version="1.0" encoding="UTF-8"?>
<!--
Lab 02 - CodeIgniter Intro
-->
<lab status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Lab Goals" layout="normal">
        <p>The purpose of this lab is to introduce you to
            CodeIgniter and the workflow for working with
            webapps.</p>
        <p>This lab is *not* indicative of the process you want to use when in
            "full development" mode ... it has you share a single repository, with
            both members of a team having write access - a recipe for disaster!  
            I set the lab up this way
            to break you in gently to good collaboration practices - if you mess
            things up now, it is relatively easy to recover :)</p>
        <p>Suggestion: you may want to skim the slideshow first,
            before working your way through it.
            I have included some hints for dealing with repository merge conflicts,
            but they are only a start.</p>
    </slide>

    <slide title="Lab Submission" layout="normal">
        <p>Your lab will be completed in a github repository.</p>
        <p>Submit a readme to the lab dropbox, with a link to your github repository.</p>
        <p>Due: three days after your lab, eg. Thursday lab period will have theirs
            due Sunday, Jan 24, 17:30 PST</p>
        <hr/>
        <p>This is a pair lab, sharing a single repository, but each using
            their own github account and computer.</p>
        <p>If you insist on working on your own, you will need to setup a second github
            account, and use two machines, to get the full benefit (and marks) of the lab.</p>
    </slide>

    <slide title="Lab Preparation" layout="normal">
        <p>You prepared for this lab last week, with:</p>
        <ul>
            <li>your D2L group</li>
            <li>your github setup</li>
            <li>your cloned repo</li>
            <li>your AMP setup</li>
            <li>your CodeIgniter starter</li>
            <li>all together in your repo</li>
        </ul>
        <p>This lab will take you through the conversion of the provided
            static website into a CodeIgniter webapp :)</p>
    </slide>

    <slide title="Prepared?" layout="normal">
        <p>You should have your <code>htdocs</code> folder ready to roll,
            with the CodeIgniter <code>system3</code> framework folder inside it,
            as well as your lab's project folder.
        </p>
        <p>You will have a local domain defined and virtual hosting setup in
            your Apache.</p>
        <p>You may have the CodeIgniter user guide in a folder on your desktop 
            for convenience.</p>
    </slide>

    <slide title="Lab Work" layout="normal">
        <p>There are three tutorials to complete for this lab, for marks... Don't start yet!</p>
        <ul>
            <li>Tutorial <a href="/show/tutorial/ci-basic01" target="_blank">ci-basic01</a>: trivial CI site </li>
            <li>Tutorial <a href="/show/tutorial/ci-basic02" target="_blank">ci-basic02</a>: basic CodeIgniter webapp</li>
            <li>Tutorial <a href="/show/tutorial/ci-basic03" target="_blank">ci-basic03</a>: good CodeIgniter webapp</li>
        </ul>
    </slide>

    <slide title="Lab Process - the fun part..." layout="normal">
        <ul>
            <li>You have a shared repo from last week. One of you owns it and the other
                is a collaborator. You both have push rights to this repo.
                Each of you will clone your shared repo to their respective machines.</li>
            <li>Complete the first tutorial with one of you "driving" and the other "navigating". When done,
                make sure you (the driver) commit and push your changes to your shared repo.</li>
            <li>Before starting the second tutorial, switch roles and computers. The new "driver" will need
                to synchronize their repo with the shared one, and then work through the tutorial.
                Remember to commit and push when done.</li>
            <li>Before starting the third tutorial, switch roles and machines again. Synchronize,
                complete the tutorial, and push/commit your changes.</li>
            <li>Both of you should synchronize your local repositories with the shared ones,
                once the tutorials are completed.</li>
        </ul>
    </slide>

    <slide title="Synchronizing Backstory" layout="normal">
        <p>Synchronizing repositories is the process of making sure they
            start from a consistent codebase.</p>
        <p>If the shared repository has changed since you last synchronized,
            you run the risk of your local changes being rejected when you try to push
            them to the shared repository.</p>
        <p>Some of you will find it easier to work with github from within
            your IDE, while others might prefer a command line (git bash shell).
            Some commands are easily done from the command line.</p>
        <p>To make your life a bit easier, I have posted a couple of
            cheat sheets to the "supplementary" module in our D2L content.
            The <a href="https://learn.bcit.ca/d2l/le/content/283805/viewContent/1741735/View">"github" one</a> 
            is from the horse's mouth, while the <a href="https://learn.bcit.ca/d2l/le/content/283805/viewContent/1741736/View">"git-tower"
                one</a> has some helpful hints &amp; explanations.</p>
    </slide>

    <slide title="Synchronizing Procedure" layout="normal">
        <p>The following *local* steps are an appropriate procedure to synchronize repos:</p>
        <ul>
            <li>Before you start a new coding session, synchronize repos by doing 
                a <code>git pull origin</code>, either from a git bash shell 
                (in your project folder) or by using the appropriate "git pull"
                icon in your IDE toolbar.
                This will fetch any changes from the shared repo, and merge them into your local project.
                If there are merge conflicts, resolve them before continuing.</li>
            <li>Code away. Commit related changes, with good commit comments.</li>
            <li>When you have completed a logical chunk of code, and it is working,
                you are ready to push your changes to the shared repository...</li>
            <li>Commit any outstanding changes.
                Resynchronize with the shared repo, resolving any merge conflicts.
                Push your committed changes to the shared repo, by doing a 
                <code>git push origin</code>, from either the command line or inside your IDE.
            </li>
        </ul>
    </slide>

    <slide title="Resolving Merge Conflicts" layout="normal">
        <p>In spite of your best intentions, collaborators get their repositories 
            out of sequence with the shared repository. When this happens, you have
            two choices: fix the inconsistencies, or start over (disaster recovery).</p>
        <p>Git has a mergetool to help resolve conflicts. It presents inconsistencies
            between two repositories, and lets you choose which version to keep.
            Any changes managed this way need to be commited locally before
            your repository is deemed conflict free.</p>
    </slide>

    <slide title="Disaster Recovery" layout="normal">
        <p>If the repository inconsistencies are too extreme for the mergetool 
            to fix, then you start over. You could copy or rename your local repository,
            and then reclone the shared repository and re-apply the changes you intended
            to make. There is a <code>git stash</code> tool to help with this.
        </p>
    </slide>

    <slide title="Lab Marking Guideline" layout="normal">
        <p>This lab will be marked out of 10, as follows:</p>
        <ul>
            <li>Tutorial basic01: trivial CI site (3)</li>
            <li>Tutorial basic02: basic CodeIgniter webapp (3)</li>
            <li>Tutorial basic02: good CodeIgniter webapp (2)</li>
            <li>Process - proper commit history (2)</li>
        </ul>
        <p>Your github repository will be in a state consistent with the end of one of the above,
            and you do not need three repos!</p>
    </slide>

    <slide title="Disclaimer" layout="normal">
        <p>We will not necessarily be following "best practices" throughout this lab.</p>
        <p>Our focus is on "baby steps", that will lead to best practices over the
            next few labs.</p>
    </slide>

</lab>
